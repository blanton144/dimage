#!/usr/bin/env python

#
# Calculate 2D Petrosian quantities for NSA galaxies
#
# MRB 2014-05-14 
# 

import pdb
import os
import sys
import numpy as np
import astropy.io.fits as pyfits
import astropy.wcs as wcs
import dimage
import getopt
import random
import scipy.ndimage.filters as filters

def calc_petro2d(galaxy):
    # Get directory with atlas images
    iauname=galaxy['iauname']
    aid=galaxy['aid']
    pid=galaxy['pid']
    nsaid=galaxy['nsaid']
    fdir= os.path.join(os.getenv('ATLAS_DATA'),
                       'v1', 'detect', 'v1_0', 
                       galaxy['subdir'])
    adir= os.path.join(fdir, 'atlases',
                       str(pid))
    pimagefile= os.path.join(fdir, iauname+'-pimage.fits.gz')
    rimagefile= os.path.join(fdir, iauname+'-r.fits.gz')
    filebase= os.path.join(adir, iauname+'-'+
                           str(pid))
    measfile= filebase+'-measure.fits.gz'
    pfile= filebase+'-petro.fits'
    imbase= filebase+'-atlas-'+str(aid)
    imfile= imbase+'.fits.gz'
    if(os.path.exists(imfile)):
        print "NSAID= "+str(nsaid)+" "+imfile
        sys.stdout.flush()

        # Try to mitigate residual bad sky subtraction; a median will be
        # determined, that will be applied to the Petrosian radius determination,
        # but not to the actual flux determination
        fp= pyfits.open(pimagefile)
        pimage= fp[0].data
        fp.close()
        fp= pyfits.open(rimagefile)
        rimage= fp[0].data
        fp.close()
        oimage= np.float32(pimage >= 0.)
        osimage= filters.uniform_filter(oimage, 41)
        osimage= np.float32(osimage > 0.)
        izero= np.nonzero(osimage.flat == 0.)
        if(len(izero)>0):
            median_image= np.median(rimage.flat[izero])
        else:
            median_image= 0.
        
        # Now call Petrosian for various cases
        fp= pyfits.open(imfile)
        image= fp[2].data
        header= fp[2].header
        imwcs= wcs.WCS(header)
        fp.close()
        fp= pyfits.open(measfile)
        measure= fp[1].data
        fp.close()
        racen= measure['racen']
        deccen= measure['deccen']
        (xcen, ycen)= imwcs.wcs_world2pix(racen, deccen, 0)
        petro_default= dict()
        petro_default['flux']=-9999.
        petro_default['rad']=-9999.
        petro_default['r50']=-9999.
        petro_default['r90']=-9999.
        ba_p= measure['ba90']
        phi_p= 90.-measure['phi90']
        try:
            petro_p= dimage.petro(image, xcen=xcen, ycen=ycen, 
                                  ba=ba_p, phi=phi_p, fixmedian=median_image)
        except:
            petro_p= petro_default
        ba_nm= measure['ba90']
        phi_nm= 90.-measure['phi90']
        try:
            petro_nm= dimage.petro(image, xcen=xcen, ycen=ycen, 
                                   ba=ba_nm, phi=phi_nm)
        except:
            petro_nm= petro_default
        ba_s= measure['sersic_ba']
        phi_s= 90.-measure['sersic_phi']
        try:
            petro_s= dimage.petro(image, xcen=xcen, ycen=ycen, 
                                  ba=ba_s, phi=phi_s, fixmedian=median_image)
        except:
            petro_s= petro_default
        ba_b= measure['ba90']
        phi_b= 90.-measure['phi90']
        try:
            petro_b= dimage.petro(image, xcen=xcen, ycen=ycen, 
                                  ba=ba_b, phi=phi_b, npetro=2.5,
                                  fixmedian=median_image)
        except:
            petro_b= petro_default
        ba_f= measure['sersic_ba']
        phi_f= 90.-measure['sersic_phi']
        flux_f= measure['sersicflux'][:,2]
        try:
            petro_f= dimage.petro(image, xcen=xcen, ycen=ycen, 
                                  ba=ba_f, phi=phi_f, forceflux=flux_f, fixmedian=median_image)
        except:
            petro_f= petro_default
        dtype=[('nsaid', np.int), ('pid', np.int), ('aid', np.int), 
               ('racen', np.float64), ('deccen', np.float64), 
               ('xcen', np.float32), ('ycen', np.float32), 
               ('ba_p', np.float32), ('phi_p', np.float32), 
               ('petroflux_p', np.float32), ('petrorad_p', np.float32), 
               ('petror50_p', np.float32), ('petror90_p', np.float32), 
               ('ba_nm', np.float32), ('phi_nm', np.float32), 
               ('petroflux_nm', np.float32), ('petrorad_nm', np.float32), 
               ('petror50_nm', np.float32), ('petror90_nm', np.float32), 
               ('ba_s', np.float32), ('phi_s', np.float32), 
               ('petroflux_s', np.float32), ('petrorad_s', np.float32), 
               ('petror50_s', np.float32), ('petror90_s', np.float32), 
               ('ba_b', np.float32), ('phi_b', np.float32), 
               ('petroflux_b', np.float32), ('petrorad_b', np.float32), 
               ('petror50_b', np.float32), ('petror90_b', np.float32), 
               ('ba_f', np.float32), ('phi_f', np.float32), 
               ('petroflux_f', np.float32), ('petrorad_f', np.float32), 
               ('petror50_f', np.float32), ('petror90_f', np.float32), 
               ]
        data= np.array([(nsaid, pid,aid,racen,deccen, 
                         xcen,ycen,
                         ba_p,phi_p,
                         petro_p['flux'],petro_p['rad'],
                         petro_p['r50'],petro_p['r90'],
                         ba_nm,phi_nm,
                         petro_nm['flux'],petro_nm['rad'],
                         petro_nm['r50'],petro_nm['r90'],
                         ba_s,phi_s,
                         petro_s['flux'],petro_s['rad'],
                         petro_s['r50'],petro_s['r90'],
                         ba_b,phi_b,
                         petro_b['flux'],petro_b['rad'],
                         petro_b['r50'],petro_b['r90'],
                         ba_f,phi_f,
                         petro_f['flux'],petro_f['rad'],
                         petro_f['r50'],petro_f['r90'])], 
                       dtype=dtype)
        hdu0= pyfits.PrimaryHDU()
        hdu1= pyfits.BinTableHDU(data=data, name='Petrosian Quantities')
        hdus= pyfits.HDUList(hdus=[hdu0,hdu1])
        hdus.writeto(pfile, clobber=True)

def main(argv):
    # Set defaults
    version='v1_0_0'
    istart=0
    iend=-1
    randomize=0
    nsaid=-1

    # Parse header
    helpstr='petro2d -v <version> -s <start> -e <end>'
    try:
        opts, args = getopt.getopt(argv,"hn:v:s:e:r:",["help=","nsaid=","version=","start=","end=","random="])
    except getopt.GetoptError:
        print helpstr
        sys.exit(2)
    for opt, arg in opts:
        if opt == ("-h", "--help"):
            print helpstr;
            sys.exit()
        elif opt in ("-s", "--start"):
            istart = int(arg)
        elif opt in ("-e", "--end"):
            iend = int(arg)
        elif opt in ("-v", "--version"):
            version = arg
        elif opt in ("-n", "--nsaid"):
            nsaid = np.int(arg)
        elif opt in ("-r", "--randomize"):
            randomize = int(arg)
            
    # Read in appropriate section of NSA file        
    vN= (version.split('_'))[0]
    nsafile= os.getenv('ATLAS_DATA')+'/'+vN+'/nsa_'+version+'.fits'
    nsafp= pyfits.open(nsafile, memmap=True)
    if(nsaid>=0): 
        ipick= (np.nonzero(nsafp[1].data['NSAID'] == nsaid))[0]
        if(len(ipick)==0):
            print "No such NSAID "+str(nsaid)
            sys.exit(2)
        nsa= nsafp[1].data[ipick]
    elif(randomize <= 0):
        # slice out part of interest
        if(iend == -1):
            iend=(nsafp[1].header['NAXIS2'])-1
        nsa= nsafp[1].data[istart:iend+1]
    else:
        # or random sample 
        indx=np.arange(nsafp[1].header['NAXIS2'])
        random.shuffle(indx)
        nsa= nsafp[1].data[indx[0:randomize]]
        
    nsafp.close()
            
    # Calculate Petrosian quantities for each galaxy
    for galaxy in nsa:
        calc_petro2d(galaxy)

if __name__ == "__main__": 
    try:
        main(sys.argv[1:])
    except:
        import sys
        tb = sys.exc_info()[2]
        pdb.post_mortem(tb)
