#!/usr/bin/env python

#
# Calculate 2D Petrosian quantities for NSA galaxies
#
# MRB 2014-05-14 
# 

import pdb
import os
import sys
import numpy as np
import astropy.io.fits as pyfits
import astropy.wcs as wcs
import dimage
import getopt
import random
import scipy.ndimage.filters as filters

# Band names
bands=['fd', 'nd', 'u', 'g', 'r', 'i', 'z']
bnums=[6,5,0,1,2,3,4]

def image_median(imagebase, band='r'):
    "Determines median image outside detected objects"
    num= bnums[bands.index(band)]
    pimagefile= imagebase+'-'+str(num)+'-pimage.fits.gz'
    imagefile= imagebase+'-'+band+'.fits.gz'
    fp= pyfits.open(pimagefile)
    pimage= fp[0].data
    fp.close()
    fp= pyfits.open(imagefile)
    image= fp[0].data
    fp.close()
    if(image.shape != pimage.shape):
        nx=min([image.shape[0], pimage.shape[0]])
        ny=min([image.shape[1], pimage.shape[1]])
        image= image[0:nx, 0:ny]
        pimage= pimage[0:nx, 0:ny]
    oimage= np.float32(pimage >= 0.)
    osimage= filters.uniform_filter(oimage, 41)
    osimage= np.float32(osimage > 0.)
    izero= (np.nonzero(osimage.flat == 0.))[0]
    if(len(izero)>0):
        median_image= np.median(image.flat[izero])
    else:
        median_image= 0.
    return median_image

def get_pixscale(imwcs, ra, dec):
    "Returns pixel scale in arcsec/pixel"
    arcsectest= 10.
    degtest=arcsectest/3600.
    (x0, y0)= imwcs.wcs_world2pix(ra, dec, 0)
    (x1, y1)= imwcs.wcs_world2pix(ra, dec+degtest, 0)
    pixtest= np.sqrt((x0-x1)**2+(y0-y1)**2)
    scale= arcsectest/pixtest
    return scale

def calc_petro2d(galaxy):
    # Get directory with atlas images
    iauname=galaxy['iauname']
    aid=galaxy['aid']
    pid=galaxy['pid']
    nsaid=galaxy['nsaid']
    fdir= os.path.join(os.getenv('ATLAS_DATA'),
                       'v1', 'detect', 'v1_0', 
                       galaxy['subdir'])
    adir= os.path.join(fdir, 'atlases',
                       str(pid))
    fullbase= os.path.join(fdir, iauname)
    filebase= os.path.join(adir, iauname+'-'+str(pid))
    measfile= filebase+'-measure.fits.gz'
    pfile= filebase+'-petro.fits'
    imbase= filebase+'-atlas-'+str(aid)
    imfile= imbase+'.fits.gz'
    if(os.path.exists(imfile)):
        print "NSAID= "+str(nsaid)+" "+imfile
        sys.stdout.flush()

        # Set reference band
        bref='r'
        iref= bnums[bands.index(bref)]

        # Try to mitigate residual bad sky subtraction; a median will be
        # determined, that will be applied to the Petrosian radius
        # determination, but not to the actual flux determination
        median_image= image_median(fullbase, band=bref)

        # Set defaults
        petro_default= dict()
        petro_default['flux']=-9999.
        petro_default['rad']=-9999.
        petro_default['r50']=-9999.
        petro_default['r90']=-9999.
        
        # Now determine Petrosian quantities for reference band
        fp= pyfits.open(imfile)
        image= fp[iref].data
        header= fp[iref].header
        imwcs= wcs.WCS(header)
        fp.close()
        fp= pyfits.open(measfile)
        measure= fp[1].data
        fp.close()
        racen= measure['racen']
        deccen= measure['deccen']
        (xcen, ycen)= imwcs.wcs_world2pix(racen, deccen, 0)
        rpixscale= get_pixscale(imwcs, racen, deccen)
        ba= measure['ba90']
        phi= 90.-measure['phi90']
        try:
            petro= dimage.petro(image, xcen=xcen, ycen=ycen, 
                                  ba=ba, phi=phi, fixmedian=median_image)
        except:
            petro= petro_default

        # Set aperture radius in arcsec (handle case where undefined)
        if(petro['rad'] == -9999.):
            prad= 5.
        else :
            prad=petro['rad']*rpixscale

        # Measure Petrosian fluxes using same aperture in other bands.    
        fp= pyfits.open(imfile)
        petroflux=np.zeros(len(bands))-9999.
        petroth50=np.zeros(len(bands))-9999.
        petroth90=np.zeros(len(bands))-9999.
        pixscale=np.zeros(len(bands))
        for band in bands:
            iband=bnums[bands.index(band)]
            median_image= image_median(fullbase, band=band)
            image= fp[iband].data
            header= fp[iband].header
            imwcs= wcs.WCS(header)
            (xcen, ycen)= imwcs.wcs_world2pix(racen, deccen, 0)
            cpixscale= get_pixscale(imwcs, racen, deccen)
            petrorad= prad/cpixscale
            try:
                cpetro= dimage.petro(image, xcen=xcen, ycen=ycen, 
                                    ba=ba, phi=phi, petrorad=petrorad, 
                                    fixmedian=median_image)
            except:
                cpetro= petro_default
            petroflux[bands.index(band)]= cpetro['flux']
            if(cpetro['r50'] != -9999.):
                petroth50[bands.index(band)]= cpetro['r50']*cpixscale
            if(cpetro['r90'] != -9999.):
                petroth90[bands.index(band)]= cpetro['r90']*cpixscale
            pixscale[bands.index(band)]= cpixscale
        fp.close()
            
        dtype=[('nsaid', np.int), ('pid', np.int), ('aid', np.int), 
               ('racen', np.float64), ('deccen', np.float64), 
               ('xcen', np.float32), ('ycen', np.float32), 
               ('ba', np.float32), ('phi', np.float32), 
               ('petroflux_r', np.float32), ('petrotheta_r', np.float32), 
               ('petroth50_r', np.float32), ('petroth90_r', np.float32), 
               ('petrotheta', np.float32), 
               ('petroflux', np.float32, (len(bands),)),
               ('petroth50', np.float32, (len(bands),)),
               ('petroth90', np.float32, (len(bands),)), 
               ]
        data= np.array([(nsaid, pid,aid,
                         racen,deccen, 
                         xcen,ycen,
                         ba,phi,
                         petro['flux'],petro['rad']*rpixscale,
                         petro['r50']*rpixscale,petro['r90']*rpixscale,
                         prad, 
                         petroflux,
                         petroth50,
                         petroth90)],
                       dtype=dtype)
        hdu0= pyfits.PrimaryHDU()
        hdu1= pyfits.BinTableHDU(data=data, name='Petrosian Quantities')
        hdus= pyfits.HDUList(hdus=[hdu0,hdu1])
        hdus.writeto(pfile, clobber=True)

def main(argv):
    # Set defaults
    version='v1_0_0'
    istart=0
    iend=-1
    randomize=0
    nsaid=-1

    # Parse header
    helpstr='petro2d -v <version> -s <start> -e <end>'
    try:
        opts, args = getopt.getopt(argv,"hn:v:s:e:r:",["help=","nsaid=","version=","start=","end=","random="])
    except getopt.GetoptError:
        print helpstr
        sys.exit(2)
    for opt, arg in opts:
        if opt == ("-h", "--help"):
            print helpstr;
            sys.exit()
        elif opt in ("-s", "--start"):
            istart = int(arg)
        elif opt in ("-e", "--end"):
            iend = int(arg)
        elif opt in ("-v", "--version"):
            version = arg
        elif opt in ("-n", "--nsaid"):
            nsaid = np.int(arg)
        elif opt in ("-r", "--randomize"):
            randomize = int(arg)
            
    # Read in appropriate section of NSA file        
    vN= (version.split('_'))[0]
    nsafile= os.getenv('ATLAS_DATA')+'/'+vN+'/nsa_'+version+'.fits'
    nsafp= pyfits.open(nsafile, memmap=True)
    if(nsaid>=0): 
        ipick= (np.nonzero(nsafp[1].data['NSAID'] == nsaid))[0]
        if(len(ipick)==0):
            print "No such NSAID "+str(nsaid)
            sys.exit(2)
        nsa= nsafp[1].data[ipick]
    elif(randomize <= 0):
        # slice out part of interest
        if(iend == -1):
            iend=(nsafp[1].header['NAXIS2'])-1
        nsa= nsafp[1].data[istart:iend+1]
    else:
        # or random sample 
        indx=np.arange(nsafp[1].header['NAXIS2'])
        random.shuffle(indx)
        nsa= nsafp[1].data[indx[0:randomize]]
        
    nsafp.close()
            
    # Calculate Petrosian quantities for each galaxy
    for galaxy in nsa:
        calc_petro2d(galaxy)

if __name__ == "__main__": 
    try:
        main(sys.argv[1:])
    except:
        import sys
        tb = sys.exc_info()[2]
        pdb.post_mortem(tb)
