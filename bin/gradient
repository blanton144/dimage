#!/usr/bin/env python 

#
# Calculate aperture corrections for NSA elliptical Petrosian measurements
#
# MRB 2014-05-14 
# 

import pdb
import os
import sys
import numpy as np
import fitsio
import dimage
import getopt
import random
from scipy import interpolate

# Band names
bands=['fd', 'nd', 'u', 'g', 'r', 'i', 'z']
bnums=[6,5,0,1,2,3,4]

def calc_gradient(galaxy):
    # Get directory with atlas images
    iauname=galaxy['IAUNAME']
    aid=galaxy['AID']
    pid=galaxy['PID']
    nsaid=galaxy['NSAID']
    fdir= os.path.join(os.getenv('ATLAS_DATA'),
                       'v1', 'detect', 'v1_0', 
                       galaxy['SUBDIR'])
    adir= os.path.join(fdir, 'atlases',
                       str(pid))
    fullbase= os.path.join(fdir, iauname)
    filebase= os.path.join(adir, iauname+'-'+str(pid))
    pfile= filebase+'-petro.fits'
    outfile= filebase+'-petro-gradient.fits'
    gfile= filebase+'-'+'g'+'-cog.fits'
    rfile= filebase+'-'+'r'+'-cog.fits'
    nfile= filebase+'-'+'nd'+'-cog.fits'
    if(os.path.exists(pfile) and os.path.exists(gfile) and
       os.path.exists(rfile) and os.path.exists(nfile)):

        print "NSAID= "+str(nsaid)+" "+filebase
        sys.stdout.flush()

        # Read in Petrosian
        petro= fitsio.read(pfile)
        racen=petro['racen']
        deccen=petro['deccen']
        xcen=petro['xcen']
        ycen=petro['ycen']

        # Set defaults
        f50g=-9999.
        f90g=-9999.
        f50r=-9999.
        f90r=-9999.
        f50n=-9999.
        f90n=-9999.
        gmr50=-9999.
        gmr90=-9999.
        nmr50=-9999.
        nmr90=-9999.

        try:
            cog_g= fitsio.read(gfile)
            cog_r= fitsio.read(rfile)
            cog_n= fitsio.read(nfile)
            goahead=1
        except:
            print "Skipping "+str(nsaid)+" due to no data"
            goahead=0

        if(goahead):
            # Get R50 and R90 fluxes
            r50g= petro['petroth50_r']/cog_g['pixscale']
            r90g= petro['petroth90_r']/cog_g['pixscale']
            r50r= petro['petroth50_r']/cog_r['pixscale']
            r90r= petro['petroth90_r']/cog_r['pixscale']
            r50n= petro['petroth50_r']/cog_n['pixscale']
            r90n= petro['petroth90_r']/cog_n['pixscale']
            if(r50g > 1. and r90g > 1.):
                interper=interpolate.interp1d(cog_g['rbins'][0], cog_g['fbins'][0])
                f50g= interper(petro['petroth50_r']/cog_g['pixscale'])
                f90g= interper(petro['petroth90_r']/cog_g['pixscale'])-f50g
            if(r50r > 1. and r90r > 1.):
                interper=interpolate.interp1d(cog_r['rbins'][0], cog_r['fbins'][0])
                f50r= interper(petro['petroth50_r']/cog_r['pixscale'])
                f90r= interper(petro['petroth90_r']/cog_r['pixscale'])-f50r
            if(r50n > 1. and r90n > 1.):
                interper=interpolate.interp1d(cog_n['rbins'][0], cog_n['fbins'][0])
                f50n= interper(petro['petroth50_r']/cog_n['pixscale'])
                f90n= interper(petro['petroth90_r']/cog_n['pixscale'])-f50n


            # Get colors
            if(f50r > 0. and f50g > 0.):
                gmr50= -2.5*np.log10(f50g/f50r)
            if(f90r > 0. and f90g > 0.):
                gmr90= -2.5*np.log10(f90g/f90r)
            if(f50r > 0. and f50n > 0.):
                nmr50= -2.5*np.log10(f50n/f50r)
            if(f90r > 0. and f90n > 0.):
                nmr90= -2.5*np.log10(f90n/f90r)

            dtype=[('nsaid', np.int), ('pid', np.int), ('aid', np.int), 
                   ('racen', np.float64), ('deccen', np.float64), 
                   ('f50n', np.float32), ('f90n', np.float32), 
                   ('f50g', np.float32), ('f90g', np.float32), 
                   ('f50r', np.float32), ('f90r', np.float32), 
                   ('gmr50', np.float32), ('nmr50', np.float32), 
                   ('gmr90', np.float32), ('nmr90', np.float32), 
                   ]
            data= np.array([(nsaid, pid, aid, racen, deccen,
                             f50n, f90n, 
                             f50g, f90g, 
                             f50r, f90r,
                             gmr50, nmr50,
                             gmr90, nmr90)], dtype=dtype)
            data= data.view(np.recarray)
            fitsio.write(outfile, data=data, clobber=True)
        
def main(argv):
    # Set defaults
    version='v1_0_0'
    istart=0
    iend=-1
    randomize=0
    nsaid=-1

    # Parse header
    helpstr='gradient -v <version> -s <start> -e <end>'
    try:
        opts, args = getopt.getopt(argv,"hn:v:s:e:r:",["help=","nsaid=","version=","start=","end=","random="])
    except getopt.GetoptError:
        print helpstr
        sys.exit(2)
    for opt, arg in opts:
        if opt == ("-h", "--help"):
            print helpstr;
            sys.exit()
        elif opt in ("-s", "--start"):
            istart = int(arg)
        elif opt in ("-e", "--end"):
            iend = int(arg)
        elif opt in ("-v", "--version"):
            version = arg
        elif opt in ("-n", "--nsaid"):
            nsaid = np.int(arg)
        elif opt in ("-r", "--randomize"):
            randomize = int(arg)

    # Read in appropriate section of NSA file        
    vN= (version.split('_'))[0]
    nsafile= os.getenv('ATLAS_DATA')+'/'+vN+'/nsa_'+version+'.fits'
    if(nsaid>=0): 
        nsa= fitsio.read(nsafile)
        ipick= (np.nonzero(nsa['NSAID'] == nsaid))[0]
        if(len(ipick)==0):
            print "No such NSAID "+str(nsaid)
            sys.exit(2)
        nsa= nsa[ipick]
    elif(randomize <= 0):
        # slice out part of interest
        if(iend == -1):
            iend=(nsafp[1].header['NAXIS2'])-1
        indx= istart+ np.arange(iend-istart+1)
        nsa=fitsio.read(nsafile, rows=indx)
    else:
        # or random sample 
        indx=np.arange(nsafp[1].header['NAXIS2'])
        random.shuffle(indx)
        nsa= fitsio.read(nsafile, rows=indx[0:randomize])
            
    # Calculate Petrosian quantities for each galaxy
    print dimage.memory()/1.e+9
    for galaxy in nsa:
        calc_gradient(galaxy)
        print dimage.memory()/1.e+9

if __name__ == "__main__": 
    try:
        main(sys.argv[1:])
    except:
        import sys
        tb = sys.exc_info()[2]
        pdb.post_mortem(tb)
