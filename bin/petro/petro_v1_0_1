#!/usr/bin/env python

# Create v1_0_1 file with Petrosian quantities in it.
#
# Mike Blanton, NYU 2015-10-02

import pdb
import os
import sys
import re
import numpy as np
import fitsio
import dimage.path as path

dpath = path.Path()

# Notes: 
# NSAID is NSA_ID in drpAll
# Why is Z -> NSA_REDSHIFT?
# PETROTH50 is PETRO_TH50 in drpAll, same with EL
# PETROTH90 is PETRO_TH90 in drpAll, same with EL
# How crazy would it be to remove _EL and 
#   call all of these EPETRO?
# ABSMAG in drpAll is Sersic -> needs documented, or removed
# AMIVAR in drpAll is Sersic -> needs documented, or removed
# MSTAR in drpAll is Sersic MASS -> needs documented or removed
# MSTAR_EL in drpAll is PETRO_MASS_EL -> needs documented or removed

petro_dtype = np.dtype([('ELPETRO_BA', np.float32),
                        ('ELPETRO_PHI', np.float32),
                        ('ELPETRO_FLUX_R', np.float32),
                        ('ELPETRO_FLUX_IVAR_R', np.float32),
                        ('ELPETRO_THETA_R', np.float32),
                        ('ELPETRO_TH50_R', np.float32),
                        ('ELPETRO_TH90_R', np.float32),
                        ('ELPETRO_THETA', np.float32),
                        ('ELPETRO_FLUX', np.float32, (7,)),
                        ('ELPETRO_FLUX_IVAR', np.float32, (7,)),
                        ('ELPETRO_TH50', np.float32, (7,)),
                        ('ELPETRO_TH90', np.float32, (7,)),
                        ('ELPETRO_APCORR_R', np.float32),
                        ('ELPETRO_APCORR', np.float32, (7,)),
                        ('ELPETRO_APCORR_SELF', np.float32, (7,)),
                        ])

kpetro_dtype = np.dtype([('ELPETRO_NMGY', np.float32, (7,)),
                         ('ELPETRO_NMGY_IVAR', np.float32, (7,)),
                         ('ELPETRO_OK', np.int16),
                         ('ELPETRO_RNMGY', np.float32, (7,)),
                         ('ELPETRO_ABSMAG', np.float32, (7,)),
                         ('ELPETRO_AMIVAR', np.float32, (7,)),
                         ('ELPETRO_KCORRECT', np.float32, (7,)),
                         ('ELPETRO_KCOEFF', np.float32, (5,)),
                         ('ELPETRO_MASS', np.float32),
                         ('ELPETRO_MTOL', np.float32, (7,)),
                         ('ELPETRO_B300', np.float32),
                         ('ELPETRO_B1000', np.float32),
                         ('ELPETRO_METS', np.float32)])

dr7flag_dtype = np.dtype([('IN_DR7_LSS', np.int8)])


def replace_dtype_name(dtype, oldname, newname):
    nn = list(dtype.names)
    ireplace = np.nonzero(np.array(nn) == oldname)[0][0]
    nn[ireplace] = newname
    dtype.names = tuple(nn)


def main(argv):
    old_version = 'v1_0_0'
    new_version = 'v1_0_1'

    nsafile = dpath.get('nsa', version='v1_0_0')
    newfile = os.path.basename(re.sub(old_version, new_version, nsafile))
    nsa = fitsio.read(nsafile)
    new_dtype = nsa.dtype

    petrofile = os.path.join(os.getenv('ATLAS_DATA'), 'test', 'petro',
                             'petro_v1_0_0_a3.fits')
    petro = fitsio.read(petrofile)

    kpetrofile = os.path.join(os.getenv('ATLAS_DATA'), 'test', 'petro',
                              'petro_kcorrect_v1_0_0_a3.fits')
    kpetro = fitsio.read(kpetrofile)

    dr7flagfile = os.path.join(os.getenv('ATLAS_DATA'), 'test', 'petro',
                               'nsa_v1_0_0_dr7flag.fits')
    dr7flag = fitsio.read(dr7flagfile)

    # Construct new dtype:
    # - replace old quantities
    replace_dtype_name(new_dtype, 'NMGY', 'SERSIC_NMGY')
    replace_dtype_name(new_dtype, 'NMGY_IVAR', 'SERSIC_NMGY_IVAR')
    replace_dtype_name(new_dtype, 'OK', 'SERSIC_OK')
    replace_dtype_name(new_dtype, 'RNMGY', 'SERSIC_RNMGY')
    replace_dtype_name(new_dtype, 'ABSMAG', 'SERSIC_ABSMAG')
    replace_dtype_name(new_dtype, 'AMIVAR', 'SERSIC_AMIVAR')
    replace_dtype_name(new_dtype, 'KCORRECT', 'SERSIC_KCORRECT')
    replace_dtype_name(new_dtype, 'KCOEFF', 'SERSIC_KCOEFF')
    replace_dtype_name(new_dtype, 'MASS', 'SERSIC_MASS')
    replace_dtype_name(new_dtype, 'MTOL', 'SERSIC_MTOL')
    replace_dtype_name(new_dtype, 'B300', 'SERSIC_B300')
    replace_dtype_name(new_dtype, 'B1000', 'SERSIC_B1000')
    replace_dtype_name(new_dtype, 'METS', 'SERSIC_METS')
    replace_dtype_name(new_dtype, 'PETROTH50', 'PETRO_TH50')
    replace_dtype_name(new_dtype, 'PETROTH90', 'PETRO_TH90')
    replace_dtype_name(new_dtype, 'PETROTHETA', 'PETRO_THETA')
    replace_dtype_name(new_dtype, 'BA50', 'PETRO_BA50')
    replace_dtype_name(new_dtype, 'BA90', 'PETRO_BA90')
    replace_dtype_name(new_dtype, 'PHI50', 'PETRO_PHI50')
    replace_dtype_name(new_dtype, 'PHI90', 'PETRO_PHI90')
    replace_dtype_name(new_dtype, 'PETROFLUX', 'PETRO_FLUX')
    replace_dtype_name(new_dtype, 'PETROFLUX_IVAR', 'PETRO_FLUX_IVAR')
    replace_dtype_name(new_dtype, 'FIBERFLUX', 'FIBER_FLUX')
    replace_dtype_name(new_dtype, 'FIBERFLUX_IVAR', 'FIBER_FLUX_IVAR')
    replace_dtype_name(new_dtype, 'SERSICFLUX', 'SERSIC_FLUX')
    replace_dtype_name(new_dtype, 'SERSICFLUX_IVAR', 'SERSIC_FLUX_IVAR')

    # - append elliptical petro quantities
    new_dtype_descr = new_dtype.descr
    new_dtype_descr.extend(petro_dtype.descr)
    new_dtype_descr.extend(kpetro_dtype.descr)
    new_dtype_descr.extend(dr7flag_dtype.descr)
    new_dtype = np.dtype(new_dtype_descr)

    # Create new structure
    new_nsa = np.zeros(nsa.shape, dtype=new_dtype)
    for name in nsa.dtype.names:
        new_nsa[name] = nsa[name]
    for name in petro_dtype.names:
        pname = re.sub('(ELPETRO_)', 'PETRO', name).lower()
        if(name == 'ELPETRO_BA'):
            pname = 'ba'
        if(name == 'ELPETRO_PHI'):
            pname = 'phi'
        if(name == 'ELPETRO_FLUX_IVAR'):
            pname = 'petroivar'
        if(name == 'ELPETRO_FLUX_IVAR_R'):
            pname = 'petroivar_r'
        if(name == 'ELPETRO_APCORR'):
            pname = 'apcorr'
        if(name == 'ELPETRO_APCORR_R'):
            pname = 'apcorr_r'
        if(name == 'ELPETRO_APCORR_SELF'):
            pname = 'apcorr_self'
        new_nsa[name] = petro[pname]
    for name in kpetro_dtype.names:
        kname = re.sub('(ELPETRO_?)', '', name)
        new_nsa[name] = kpetro[kname]
    new_nsa['IN_DR7_LSS'] = dr7flag
    new_nsa['ELPETRO_PHI'] = 180. - new_nsa['ELPETRO_PHI']

    # Write out file
    fitsio.write(newfile, new_nsa, clobber=True)


if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except:
        import sys
        tb = sys.exc_info()[2]
        pdb.post_mortem(tb)
