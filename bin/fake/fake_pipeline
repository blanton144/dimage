#!/usr/bin/env python

import getopt
import os
import fitsio
import sys
import dimage.path
import dimage.pipeline
import random
import pydl.pydlutils.yanny.yanny as Yanny
import numpy as np

dpath = dimage.path.Path()


def main(argv):

    # Defaults
    take = None
    name = None
    clobber = False

    # Parse header
    helpstr = 'fake_pipeline -t take -n name'
    try:
        opts, args = getopt.getopt(argv, "ht:n:c",
                                   ["help=", "take=", "name=",
                                    "clobber="])
    except getopt.GetoptError:
        print helpstr
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print helpstr
            sys.exit()
        elif opt in ("-t", "--take"):
            take = arg
        elif opt in ("-n", "--name"):
            name = arg
        elif opt in ("-c", "--clobber"):
            clobber = True

    if(take is None):
        print "Must specify take with -t or --take"
        sys.exit()

    if(name is None):
        print "Must specify version with -n or --name"
        sys.exit()

    take_params = Yanny(dpath.full('take-params', take=take))
    iname = np.nonzero(np.array(take_params['PIPELINE']['name']) ==
                       name)[0][0]
    pipeline = take_params['PIPELINE']['pipeline'][iname]
    version = take_params['PIPELINE']['version'][iname]

    fakelist_file = dpath.full('fake-params', take=take, version=version)
    fakelist = fitsio.read(fakelist_file)

    pipeline_function = getattr(dimage.pipeline, pipeline)

    for findx in fakelist['fake_indx']:
        fake_file = dpath.full('fake-fits', take=take,
                               version=version, index=findx)
        fake_file_copy = dpath.full('fake-fits-pipeline', take=take,
                                    version=version, pipeline=pipeline,
                                    index=findx)

        # copy fake file to pipeline dir
        dirname = os.path.dirname(fake_file_copy)
        if(os.path.isdir(dirname) is False):
            os.makedirs(dirname)
        ifp = open(fake_file, "r")
        ofp = open(fake_file_copy, "w")
        ofp.write(ifp.read())
        ifp.close()
        ofp.close()

        # run pipeline
        pipeline_function(fake_file_copy)


if __name__ == "__main__":
    main(sys.argv[1:])
