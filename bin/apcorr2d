#!/usr/bin/env python 

#
# Calculate aperture corrections for NSA elliptical Petrosian measurements
#
# MRB 2014-05-14 
# 

import pdb
import os
import sys
import numpy as np
import fitsio
import dimage
import getopt
import random

# Band names
bands=['fd', 'nd', 'u', 'g', 'r', 'i', 'z']
bnums=[6,5,0,1,2,3,4]

def calc_apcorr2d(galaxy):
    # Get directory with atlas images
    iauname=galaxy['IAUNAME']
    aid=galaxy['AID']
    pid=galaxy['PID']
    nsaid=galaxy['NSAID']
    fdir= os.path.join(os.getenv('ATLAS_DATA'),
                       'v1', 'detect', 'v1_0', 
                       galaxy['SUBDIR'])
    adir= os.path.join(fdir, 'atlases',
                       str(pid))
    fullbase= os.path.join(fdir, iauname)
    filebase= os.path.join(adir, iauname+'-'+str(pid))
    pfile= filebase+'-petro.fits'
    afile= filebase+'-petro-apcorr.fits'
    if(os.path.exists(pfile)):
        print "NSAID= "+str(nsaid)+" "+filebase
        sys.stdout.flush()

        # Read in Petrosian
        petro= fitsio.read(pfile)
        racen=petro['racen']
        deccen=petro['deccen']
        xcen=petro['xcen']
        ycen=petro['ycen']

        # Set reference band
        bref='r'
        iref= bnums[bands.index(bref)]

        if(petro['petrotheta_r'] > 0.):
            
            # Set reasonability limit
            apmin=0.9
            apmax_offsets= [1.2, 1.2, 1.1, 1.1, 1.1, 1.1, 1.1]
            apmax_scale= [3., 3., 0., 0., 0., 0., 0.]
            apmax= apmax_offsets+apmax_scale/(1.+petro['petroth50_r']**2)

            # Measure the aperture correction for the r-band
            cfile= filebase+'-'+bref+'-cog.fits'
            cog_r= fitsio.read(cfile)
            psffile= fullbase+'-'+bref+'-bpsf.fits.gz'
            psf= fitsio.read(psffile)
            rpixscale=cog_r['pixscale']
            aprad= petro['petrotheta_r']/cog_r['pixscale']*2.
            apcorr_r= dimage.apcorr(cog_r['rbins'][0], cog_r['sb'][0], aprad, psf, 
                                    ba=petro['ba'], phi=petro['phi'],
                                    apmin=apmin, apmax=apmax[4])

            apcorr=np.zeros(len(bands))
            apcorr_self=np.zeros(len(bands))
            for band in bands:
                cfile= filebase+'-'+band+'-cog.fits'
                cog= fitsio.read(cfile)
                psffile= fullbase+'-'+band+'-bpsf.fits.gz'
                psf= fitsio.read(psffile)
                pixscale=cog['pixscale']
                aprad= petro['petrotheta_r']/pixscale*2.
                iband= bands.index(band)
                apcorr[iband]= dimage.apcorr(cog_r['rbins'][0]*rpixscale/pixscale,
                                             cog_r['sb'][0], aprad, psf, 
                                             ba=petro['ba'], phi=petro['phi'],
                                             apmin=apmin, apmax=apmax[iband])
                apcorr_self[iband]= dimage.apcorr(cog['rbins'][0], 
                                                  cog['sb'][0], aprad, psf, 
                                                  ba=petro['ba'], phi=petro['phi'],
                                                  apmin=apmin, apmax=apmax[iband])
            apcorr=apcorr/apcorr_r
            apcorr_self=apcorr_self/apcorr_r

        else:
            # Bail if no good measurement
            apcorr_r= 1.
            apcorr=np.ones(len(bands))
            apcorr_self=np.ones(len(bands))

        dtype=[('nsaid', np.int32), ('pid', np.int32), ('aid', np.int32), 
               ('racen', np.float64), ('deccen', np.float64), 
               ('xcen', np.float32), ('ycen', np.float32), 
               ('petrotheta_r', np.float64), 
               ('ba', np.float64), ('phi', np.float64), 
               ('apcorr_r', np.float32), 
               ('apcorr', np.float32, (len(bands),)),
               ('apcorr_self', np.float32, (len(bands),)),
               ]
        data= np.array([(nsaid, pid,aid,
                         racen,deccen, 
                         xcen,ycen,
                         petro['petrotheta_r'],
                         petro['ba'],petro['phi'],
                         apcorr_r,
                         apcorr, 
                         apcorr_self)],
                       dtype=dtype)
        data= data.view(np.recarray)
        fitsio.write(afile, data=data, clobber=True)
            
def main(argv):
    # Set defaults
    version='v1_0_0'
    istart=0
    iend=-1
    randomize=0
    nsaid=-1

    # Parse header
    helpstr='apcorr2d -v <version> -s <start> -e <end>'
    try:
        opts, args = getopt.getopt(argv,"hn:v:s:e:r:",["help=","nsaid=","version=","start=","end=","random="])
    except getopt.GetoptError:
        print helpstr
        sys.exit(2)
    for opt, arg in opts:
        if opt == ("-h", "--help"):
            print helpstr;
            sys.exit()
        elif opt in ("-s", "--start"):
            istart = int(arg)
        elif opt in ("-e", "--end"):
            iend = int(arg)
        elif opt in ("-v", "--version"):
            version = arg
        elif opt in ("-n", "--nsaid"):
            nsaid = np.int(arg)
        elif opt in ("-r", "--randomize"):
            randomize = int(arg)

    # Read in appropriate section of NSA file        
    vN= (version.split('_'))[0]
    nsafile= os.getenv('ATLAS_DATA')+'/'+vN+'/nsa_'+version+'.fits'
    if(nsaid>=0): 
        nsa= fitsio.read(nsafile)
        ipick= (np.nonzero(nsa['NSAID'] == nsaid))[0]
        if(len(ipick)==0):
            print "No such NSAID "+str(nsaid)
            sys.exit(2)
        nsa= nsa[ipick]
    elif(randomize <= 0):
        # slice out part of interest
        if(iend == -1):
            iend=(nsafp[1].header['NAXIS2'])-1
        indx= istart+ np.arange(iend-istart+1)
        nsa=fitsio.read(nsafile, rows=indx)
    else:
        # or random sample 
        indx=np.arange(nsafp[1].header['NAXIS2'])
        random.shuffle(indx)
        nsa= fitsio.read(nsafile, rows=indx[0:randomize])
            
    # Calculate Petrosian quantities for each galaxy
    print dimage.memory()/1.e+9
    for galaxy in nsa:
        calc_apcorr2d(galaxy)
        print dimage.memory()/1.e+9

if __name__ == "__main__": 
    try:
        main(sys.argv[1:])
    except:
        import sys
        tb = sys.exc_info()[2]
        pdb.post_mortem(tb)
